import { Brain } from 'lucide-react';
import { useState, useEffect } from 'react';
import APIService from '../services/api';

const HomeScreen = () => {
  const [balance, setBalance] = useState(0);
  const [transactions, setTransactions] = useState([]);
  const [aiInsight, setAiInsight] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [analyticsData, transactionsData, insightsData] = await Promise.all([
        APIService.getAnalyticsSummary(),
        APIService.getTransactions(),
        APIService.getAIInsights()
      ]);

      setBalance(analyticsData.balance || 0);
      setTransactions(transactionsData.slice(0, 5)); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
      
      if (insightsData && insightsData.length > 0) {
        setAiInsight(insightsData[0]); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏–Ω—Å–∞–π—Ç
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
      setLoading(false);
    }
  };

  const formatAmount = (amount, type) => {
    const sign = type === 'income' ? '+' : '';
    return `${sign}‚ÇΩ ${Math.abs(amount).toLocaleString()}`;
  };

  const getCategoryIcon = (category) => {
    const icons = {
      '–ü—Ä–æ–¥—É–∫—Ç—ã': 'üõí',
      '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'üöá',
      '–ï–¥–∞': 'üçΩÔ∏è',
      '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'üé¨',
      '–ó–¥–æ—Ä–æ–≤—å–µ': 'üíä',
      '–ö–æ—à–µ–ª—ë–∫': 'üí≥',
      '–ó–∞—Ä–ø–ª–∞—Ç–∞': 'üí∞',
      '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'üìö'
    };
    return icons[category] || 'üí∞';
  };

  const getCategoryColor = (category) => {
    const colors = {
      '–ü—Ä–æ–¥—É–∫—Ç—ã': 'bg-blue-500',
      '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'bg-purple-500',
      '–ï–¥–∞': 'bg-green-500',
      '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'bg-red-500',
      '–ó–¥–æ—Ä–æ–≤—å–µ': 'bg-pink-500',
      '–ö–æ—à–µ–ª—ë–∫': 'bg-orange-500',
      '–ó–∞—Ä–ø–ª–∞—Ç–∞': 'bg-green-500',
      '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'bg-indigo-500'
    };
    return colors[category] || 'bg-gray-500';
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    );
  }

  return (
    <div className="p-4 space-y-6">
      {/* –ë–∞–ª–∞–Ω—Å */}
      <div className="text-center">
        <div className="text-3xl font-bold text-red-500 mb-2">
          ‚ÇΩ {balance.toLocaleString()}
        </div>
        <div className="text-gray-500">–û–±—â–∏–π –±–∞–ª–∞–Ω—Å</div>
      </div>

      {/* –ò–ò —Å–æ–≤–µ—Ç */}
      {aiInsight && (
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-4 rounded-xl">
          <div className="flex items-center gap-2 mb-2">
            <Brain size={20} />
            <span className="font-medium">–ò–ò —Å–æ–≤–µ—Ç:</span>
          </div>
          <div className="text-sm">{aiInsight.message}</div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
      <div className="space-y-3">
        {transactions.map((transaction) => (
          <div key={transaction.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div className="flex items-center gap-3">
              <div className={`w-12 h-12 ${getCategoryColor(transaction.category)} rounded-full flex items-center justify-center text-white text-lg`}>
                {getCategoryIcon(transaction.category)}
              </div>
              <div>
                <div className="font-medium">{transaction.category}</div>
                <div className="text-sm text-gray-500">
                  {transaction.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}
                </div>
              </div>
            </div>
            <div className={`font-bold ${transaction.type === 'income' ? 'text-green-500' : 'text-red-500'}`}>
              {formatAmount(transaction.amount, transaction.type)}
            </div>
          </div>
        ))}
      </div>

      {transactions.length === 0 && (
        <div className="text-center text-gray-500 py-8">
          –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        </div>
      )}
    </div>
  );
};

export default HomeScreen;

