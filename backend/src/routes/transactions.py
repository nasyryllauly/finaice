from flask import Blueprint, request, jsonify
from src.models.user import db, User
from src.models.transaction import Transaction, Category, AIInsight
from datetime import datetime
import random

transactions_bp = Blueprint('transactions', __name__)

# –ò–ò-—Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
class AIService:
    @staticmethod
    def suggest_category(description, amount):
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å—É–º–º—ã"""
        description_lower = description.lower() if description else ""
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        if any(word in description_lower for word in ['–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–µ–¥–∞', '–æ–±–µ–¥']):
            return '–ï–¥–∞', 0.9
        elif any(word in description_lower for word in ['—Ç–∞–∫—Å–∏', '–∞–≤—Ç–æ–±—É—Å', '–º–µ—Ç—Ä–æ', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç']):
            return '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 0.85
        elif any(word in description_lower for word in ['–º–∞–≥–∞–∑–∏–Ω', '–ø—Ä–æ–¥—É–∫—Ç—ã', '–ø–æ–∫—É–ø–∫–∏']):
            return '–ü—Ä–æ–¥—É–∫—Ç—ã', 0.8
        elif any(word in description_lower for word in ['–∫–∏–Ω–æ', '—Ç–µ–∞—Ç—Ä', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è']):
            return '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 0.75
        elif any(word in description_lower for word in ['–∞–ø—Ç–µ–∫–∞', '–≤—Ä–∞—á', '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞']):
            return '–ó–¥–æ—Ä–æ–≤—å–µ', 0.8
        else:
            return '–ü—Ä–æ—á–µ–µ', 0.3
    
    @staticmethod
    def generate_insights(user_id):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ò–ò-–∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = User.query.get(user_id)
        if not user:
            return []
        
        insights = []
        current_stats = user.get_monthly_stats()
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç
        if current_stats['expense'] > 15000:
            insights.append({
                'type': 'warning',
                'title': '–í—ã—Å–æ–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã',
                'message': f'–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç ‚ÇΩ {current_stats["expense"]:,.0f}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –±—é–¥–∂–µ—Ç.',
                'priority': 4
            })
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        if current_stats['balance'] > 30000:
            insights.append({
                'type': 'tip',
                'title': '–û—Ç–ª–∏—á–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è!',
                'message': f'–í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ ‚ÇΩ {current_stats["balance"]:,.0f} –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!',
                'priority': 2
            })
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        insights.append({
            'type': 'prediction',
            'title': '–ü—Ä–æ–≥–Ω–æ–∑ —ç–∫–æ–Ω–æ–º–∏–∏',
            'message': '–°–æ–∫—Ä–∞—Ç–∏–≤ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞ 20%, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚ÇΩ 3,000.',
            'priority': 3
        })
        
        return insights

@transactions_bp.route('/transactions', methods=['GET'])
def get_transactions():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = request.args.get('user_id', 1, type=int)
    
    transactions = Transaction.query.filter_by(user_id=user_id).order_by(Transaction.date.desc()).all()
    return jsonify([t.to_dict() for t in transactions])

@transactions_bp.route('/transactions', methods=['POST'])
def create_transaction():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º"""
    data = request.get_json()
    
    # –ò–ò-–∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    suggested_category, confidence = AIService.suggest_category(
        data.get('description', ''), 
        data.get('amount', 0)
    )
    
    transaction = Transaction(
        amount=data['amount'],
        category=data.get('category', suggested_category),
        description=data.get('description', ''),
        type=data['type'],
        user_id=data.get('user_id', 1),
        ai_category_confidence=confidence,
        ai_suggested=data.get('category') is None
    )
    
    db.session.add(transaction)
    db.session.commit()
    
    return jsonify(transaction.to_dict()), 201

@transactions_bp.route('/categories', methods=['GET'])
def get_categories():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = Category.query.all()
    return jsonify([c.to_dict() for c in categories])

@transactions_bp.route('/analytics/summary', methods=['GET'])
def get_analytics_summary():
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É"""
    user_id = request.args.get('user_id', 1, type=int)
    user = User.query.get(user_id)
    
    if not user:
        return jsonify({'error': 'User not found'}), 404
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    monthly_stats = user.get_monthly_stats()
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    transactions = Transaction.query.filter_by(user_id=user_id, type='expense').all()
    category_stats = {}
    
    for transaction in transactions:
        category = transaction.category
        if category not in category_stats:
            category_stats[category] = 0
        category_stats[category] += transaction.amount
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—É–º–º–µ
    sorted_categories = sorted(category_stats.items(), key=lambda x: x[1], reverse=True)
    
    return jsonify({
        'monthly_stats': monthly_stats,
        'balance': user.get_balance(),
        'category_breakdown': sorted_categories[:5],  # –¢–æ–ø 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        'total_transactions': len(user.transactions)
    })

@transactions_bp.route('/ai/insights', methods=['GET'])
def get_ai_insights():
    """–ü–æ–ª—É—á–∏—Ç—å –ò–ò-–∏–Ω—Å–∞–π—Ç—ã"""
    user_id = request.args.get('user_id', 1, type=int)
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Å–∞–π—Ç—ã
    existing_insights = AIInsight.query.filter_by(user_id=user_id).order_by(AIInsight.created_at.desc()).limit(5).all()
    
    # –ï—Å–ª–∏ –∏–Ω—Å–∞–π—Ç–æ–≤ –º–∞–ª–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ
    if len(existing_insights) < 3:
        new_insights = AIService.generate_insights(user_id)
        
        for insight_data in new_insights:
            insight = AIInsight(
                user_id=user_id,
                insight_type=insight_data['type'],
                title=insight_data['title'],
                message=insight_data['message'],
                priority=insight_data['priority']
            )
            db.session.add(insight)
        
        db.session.commit()
        existing_insights = AIInsight.query.filter_by(user_id=user_id).order_by(AIInsight.created_at.desc()).limit(5).all()
    
    return jsonify([i.to_dict() for i in existing_insights])

@transactions_bp.route('/ai/chat', methods=['POST'])
def ai_chat():
    """–ò–ò-—á–∞—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    data = request.get_json()
    user_message = data.get('message', '').lower()
    user_id = data.get('user_id', 1)
    
    # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –ò–ò
    responses = {
        '–∞–Ω–∞–ª–∏–∑': '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã... –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è" - –∑–¥–µ—Å—å –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏.',
        '–ø—Ä–æ–≥–Ω–æ–∑': '–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ç—Ä–∞—Ç, –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–æ ‚ÇΩ 5,000, —Å–æ–∫—Ä–∞—Ç–∏–≤ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã.',
        '—Å–æ–≤–µ—Ç': '–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ 50/30/20: 50% –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, 30% –Ω–∞ –∂–µ–ª–∞–Ω–∏—è, 20% –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è.',
        '–±—é–¥–∂–µ—Ç': '–í–∞—à —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã –∏–¥—É—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç.',
        '—ç–∫–æ–Ω–æ–º–∏—è': '–î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é: 1) –ì–æ—Ç–æ–≤–∏—Ç—å –¥–æ–º–∞ —á–∞—â–µ 2) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç 3) –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ'
    }
    
    # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ–± –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–∞—Ç, –ø—Ä–æ–≥–Ω–æ–∑–µ –∏–ª–∏ —Å–æ–≤–µ—Ç–∞—Ö –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏."
    
    for keyword, answer in responses.items():
        if keyword in user_message:
            response = answer
            break
    
    return jsonify({
        'response': response,
        'timestamp': datetime.utcnow().isoformat()
    })

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@transactions_bp.route('/init-data', methods=['POST'])
def init_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    # –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    default_categories = [
        {'name': '–ü—Ä–æ–¥—É–∫—Ç—ã', 'icon': 'üõí', 'color': 'bg-blue-500', 'type': 'expense'},
        {'name': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'icon': 'üöá', 'color': 'bg-purple-500', 'type': 'expense'},
        {'name': '–ï–¥–∞', 'icon': 'üçΩÔ∏è', 'color': 'bg-green-500', 'type': 'expense'},
        {'name': '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'icon': 'üé¨', 'color': 'bg-red-500', 'type': 'expense'},
        {'name': '–ó–¥–æ—Ä–æ–≤—å–µ', 'icon': 'üíä', 'color': 'bg-pink-500', 'type': 'expense'},
        {'name': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'icon': 'üìö', 'color': 'bg-indigo-500', 'type': 'expense'},
        {'name': '–ö–æ—à–µ–ª—ë–∫', 'icon': 'üí≥', 'color': 'bg-orange-500', 'type': 'expense'},
        {'name': '–ó–∞—Ä–ø–ª–∞—Ç–∞', 'icon': 'üí∞', 'color': 'bg-green-500', 'type': 'income'},
    ]
    
    for cat_data in default_categories:
        existing = Category.query.filter_by(name=cat_data['name']).first()
        if not existing:
            category = Category(**cat_data)
            db.session.add(category)
    
    # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_user = User.query.filter_by(username='demo').first()
    if not existing_user:
        user = User(username='demo', email='demo@budgetok.ai')
        db.session.add(user)
        db.session.commit()
        
        # –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        test_transactions = [
            {'amount': 45000, 'category': '–ó–∞—Ä–ø–ª–∞—Ç–∞', 'description': '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–∞—Ä—Ç', 'type': 'income'},
            {'amount': 850, 'category': '–ü—Ä–æ–¥—É–∫—Ç—ã', 'description': '–ü–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ', 'type': 'expense'},
            {'amount': 600, 'category': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'description': '–ü—Ä–æ–µ–∑–¥ –Ω–∞ —Ç–∞–∫—Å–∏', 'type': 'expense'},
            {'amount': 11200, 'category': '–ö–æ—à–µ–ª—ë–∫', 'description': '–ü–æ–∫—É–ø–∫–∞ –æ–¥–µ–∂–¥—ã', 'type': 'expense'},
            {'amount': 320, 'category': '–ï–¥–∞', 'description': '–û–±–µ–¥ –≤ –∫–∞—Ñ–µ', 'type': 'expense'},
        ]
        
        for trans_data in test_transactions:
            transaction = Transaction(user_id=user.id, **trans_data)
            db.session.add(transaction)
    
    db.session.commit()
    return jsonify({'message': 'Data initialized successfully'})

